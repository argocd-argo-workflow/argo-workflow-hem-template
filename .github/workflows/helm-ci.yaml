# .github/workflows/helm-ci.yaml

name: Helm Chart CI/CD

on:
  pull_request:
    branches:
      - main # Or 'master', depending on your default branch
    paths:
      - 'my-argo-workflow-chart/**' # Trigger only if changes are in your chart directory
      - '.github/workflows/helm-ci.yaml' # Also trigger if the workflow file itself changes
  push:
    branches:
      - main # Or 'master'
    paths:
      - 'my-argo-workflow-chart/**' # Trigger only if changes are in your chart directory
      - '.github/workflows/helm-ci.yaml' # Also trigger if the workflow file itself changes

env:
  CHART_DIR: my-argo-workflow-chart # Relative path to your Helm chart
  CHART_REPO_BRANCH: gh-pages      # The branch where packaged charts will be stored (for GitHub Pages)
  # Replace <YOUR_GITHUB_USERNAME> and <YOUR_REPO_NAME> with your actual details
  # This URL will be used in the index.yaml for your Helm repository
  CHART_REPO_URL: https://<YOUR_GITHUB_USERNAME>.github.io/<YOUR_REPO_NAME>/

jobs:
  lint-chart:
    name: Lint Helm Chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.15.0 # Use a specific Helm version

      - name: Run Helm Lint
        run: |
          # Navigate into the chart directory before linting
          cd ${{ env.CHART_DIR }}
          helm lint .
          echo "Helm lint completed successfully."

  package-and-publish:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    needs: lint-chart # This job will only run if lint-chart passes
    if: github.event_name == 'push' # Only run this job on push events (after merge)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required to fetch all history for gh-pages branch operations

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.15.0 # Use a specific Helm version

      - name: Get Chart Version
        id: get_version
        run: |
          # Extract chart version from Chart.yaml
          CHART_VERSION=$(helm show chart ${{ env.CHART_DIR }} | grep '^version:' | awk '{print $2}')
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT
          echo "Detected chart version: $CHART_VERSION"

      - name: Package Helm Chart
        run: |
          # Navigate into the parent directory of the chart to package
          cd $(dirname ${{ env.CHART_DIR }})
          helm package $(basename ${{ env.CHART_DIR }})
          echo "Packaged chart: ${{ env.CHART_DIR }}-${{ steps.get_version.outputs.CHART_VERSION }}.tgz"

      - name: Publish Helm Chart to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4 # Action to publish to gh-pages branch
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} # GitHub's built-in token with write access
          publish_dir: . # Publish content from the current directory (where .tgz is)
          publish_branch: ${{ env.CHART_REPO_BRANCH }} # Target branch for the Helm repo
          # The following lines ensure index.yaml is updated correctly
          force_orphan: true # Create an orphan branch if it doesn't exist
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          keep_files: true # Keep existing files in gh-pages branch
          # The following command builds/updates the index.yaml
          # It needs to be run in the directory where the .tgz files are
          # and where the index.yaml will reside.
          # The --merge flag is crucial to update existing index.yaml.
          cname: '' # Set your custom domain if you have one, otherwise leave empty
          # The artifact hub action handles the index.yaml generation/merge internally
          # based on the files in publish_dir.
          # We just need to make sure the .tgz is in the root of the publish_dir.
