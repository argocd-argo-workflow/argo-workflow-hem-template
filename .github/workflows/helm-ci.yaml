# .github/workflows/helm-ci.yaml

name: Helm Chart CI/CD

on:
  pull_request:
    branches:
      - main # Or 'master', depending on your default branch
    paths:
      - 'my-argo-workflow-chart/**' # Trigger only if changes are in your chart directory
      - '.github/workflows/helm-ci.yaml' # Also trigger if the workflow file itself changes
  push:
    branches:
      - main # Or 'master'
    paths:
      - 'my-argo-workflow-chart/**' # Trigger only if changes are in your chart directory
      - '.github/workflows/helm-ci.yaml' # Also trigger if the workflow file itself changes

env:
  CHART_DIR: my-argo-workflow-chart
  CHART_REPO_BRANCH: gh-pages
  # IMPORTANT: Replace with your actual GitHub username and repository name
  CHART_REPO_URL: https://<YOUR_GITHUB_USERNAME>.github.io/<YOUR_REPO_NAME>/
  # Keywords in commit message to trigger a release and tag
  # You can add more, e.g., 'feat:', 'release:', 'major:', 'minor:', 'patch:'
  RELEASE_KEYWORDS: 'fix:,feat:,chore: release' # Comma-separated list

# Define permissions at the workflow level for simplicity and clarity
permissions:
  contents: write # Grant write permission to the GITHUB_TOKEN for pushing code and tags
  pages: write    # Grant write permission for GitHub Pages deployment
  id-token: write # Required for OIDC, if you plan to use it (good practice to include)

jobs:
  lint-chart:
    name: Lint Helm Chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.15.0 # Use a specific Helm version

      - name: Run Helm Lint
        run: |
          cd ${{ env.CHART_DIR }}
          helm lint .
          echo "Helm lint completed successfully."

  package-and-publish:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    needs: lint-chart
    if: |
      github.event_name == 'push' && contains(env.RELEASE_KEYWORDS, github.event.head_commit.message)
      # Explanation of 'if' condition:
      # - github.event_name == 'push': Ensures this job only runs on push events (e.g., after merging a PR).
      # - contains(env.RELEASE_KEYWORDS, github.event.head_commit.message): Checks if any of the
      #   defined RELEASE_KEYWORDS exist within the message of the head commit of the push.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for operations across branches (like gh-pages) AND for Git tagging

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.15.0

      - name: Get Chart Version
        id: get_version
        run: |
          # Extract chart version from Chart.yaml
          CHART_VERSION=$(helm show chart ${{ env.CHART_DIR }} | grep '^version:' | awk '{print $2}')
          echo "CHART_VERSION=$CHART_VERSION" >> $GITHUB_OUTPUT
          echo "Detected chart version: $CHART_VERSION"

      # --- NEW STEP: Create GitHub Tag ---
      - name: Create GitHub Release Tag
        run: |
          TAG_NAME="v${{ steps.get_version.outputs.CHART_VERSION }}"
          echo "Attempting to create tag: $TAG_NAME"
          # Check if tag already exists before creating
          if git rev-parse $TAG_NAME >/dev/null 2>&1; then
              echo "Tag $TAG_NAME already exists. Skipping tag creation."
          else
              git config user.name "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"
              git tag $TAG_NAME
              git push origin $TAG_NAME
              echo "Created and pushed tag: $TAG_NAME"
          fi

      - name: Package Helm Chart
        id: package_chart
        run: |
          # Package the chart. The .tgz will be created in the current working directory.
          helm package ${{ env.CHART_DIR }}
          PACKAGED_CHART_FILE="${{ env.CHART_DIR }}-${{ steps.get_version.outputs.CHART_VERSION }}.tgz"
          echo "Packaged chart: $PACKAGED_CHART_FILE"
          echo "PACKAGED_CHART_FILE=$PACKAGED_CHART_FILE" >> $GITHUB_OUTPUT

      - name: Prepare Chart Repository Directory
        run: |
          mkdir -p .helm_repo_temp

      - name: Checkout Helm Chart Repository Branch
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ env.CHART_REPO_BRANCH }}
          path: .helm_repo_temp
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add New Chart to Repository
        run: |
          cp ${{ steps.package_chart.outputs.PACKAGED_CHART_FILE }} .helm_repo_temp/

      - name: Generate/Update Helm Repository Index
        run: |
          helm repo index .helm_repo_temp/ --url ${{ env.CHART_REPO_URL }} --merge

      - name: Commit and Push to GitHub Pages
        run: |
          cd .helm_repo_temp
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Publish helm chart ${{ env.CHART_DIR }}-${{ steps.get_version.outputs.CHART_VERSION }}" || echo "No changes to commit"
          git push origin ${{ env.CHART_REPO_BRANCH }}
